return(AA)
}
install.packages("dirmult")
########### generation data
library(dirmult)
## sample size
N=20;
## time point
T=10;
##number of taxa
P=30;
beta0=abs(rnorm(P,10,20))
## key taxa
causal.ind=sample(1:20,3)
#### generating two groups
group1=array(NA, dim = c(N,P,T))
for(t in 1:T)  group1[, ,t] = rdirichlet(N,(beta0))
group2=array(NA, dim = c(N,P,T))
for(t in 1:T){
betaT=rep(0,P)
effect.size1=c(-1,2, -1)*min(beta0[causal.ind])*sin(t)
betaT[causal.ind]=effect.size1
group2[, ,t] = rdirichlet(N,(beta0+betaT))}
########## MTA captures the common trends shared by all subjects in group1
### extracting the common trend from a group of subjects with explained variation >=85%
MTA(Y1=group1)
######## comparing between group1 and group2
MTA(list(group1,group2))
library(devtools)
install.packages("devtools")
install_github("chanw0/MTA")
library(devtools)
install_github("chanw0/MTA")
library(MTA)
MTA:MTA(Y1=group1)
MTA::MTA(Y1=group1)
library(MTA)
########## MTA captures the common trends shared by all subjects in group1
### extracting the common trend from a group of subjects with explained variation >=85%
MTA(Y1=group1)
########### generation data
library(dirmult)
## sample size
N=20;
## time point
T=10;
##number of taxa
P=30;
beta0=abs(rnorm(P,10,20))
## key taxa
causal.ind=sample(1:20,3)
#### generating two groups
group1=array(NA, dim = c(N,P,T))
for(t in 1:T)  group1[, ,t] = rdirichlet(N,(beta0))
group2=array(NA, dim = c(N,P,T))
for(t in 1:T){
betaT=rep(0,P)
effect.size1=c(-1,2, -1)*min(beta0[causal.ind])*sin(t)
betaT[causal.ind]=effect.size1
group2[, ,t] = rdirichlet(N,(beta0+betaT))}
beta0
causal.ind
print(beta0+betaT)
#### generating two groups
group1=array(NA, dim = c(N,P,T))
for(t in 1:T)  group1[, ,t] = rdirichlet(N,(beta0))
group2=array(NA, dim = c(N,P,T))
for(t in 1:T){
betaT=rep(0,P)
effect.size1=c(-1,2, -1)*min(beta0[causal.ind])*sin(t)
betaT[causal.ind]=effect.size1
group2[, ,t] = rdirichlet(N,(beta0+betaT))
print(beta0+betaT)
}
########### generation data
library(dirmult)
## sample size
N=20;
## time point
T=10;
##number of taxa
P=30;
beta0=abs(runif(P,10,20))
## key taxa
causal.ind=sample(1:20,3)
#### generating two groups
group1=array(NA, dim = c(N,P,T))
for(t in 1:T)  group1[, ,t] = rdirichlet(N,(beta0))
group2=array(NA, dim = c(N,P,T))
for(t in 1:T){
betaT=rep(0,P)
effect.size1=c(-1,2, -1)*min(beta0[causal.ind])*sin(t)
betaT[causal.ind]=effect.size1
group2[, ,t] = rdirichlet(N,(beta0+betaT))
print(beta0+betaT)
}
runif(P,10,20)
library(dirmult)
## sample size
N=20;
## time point
T=10;
##number of taxa
P=30;
beta0=abs(rnorm(P,10,20))
## key taxa
causal.ind=sample(1:20,3)
#### generating two groups
group1=array(NA, dim = c(N,P,T))
for(t in 1:T)  group1[, ,t] = rdirichlet(N,(beta0))
group2=array(NA, dim = c(N,P,T))
for(t in 1:T){
betaT=rep(0,P)
effect.size1=c(-1,2, -1)/2*min(beta0[causal.ind])*sin(t)
betaT[causal.ind]=effect.size1
group2[, ,t] = rdirichlet(N,(beta0+betaT))
print(beta0+betaT)
}
library(MTA)
########## MTA captures the common trends shared by all subjects in group1
### extracting the common trend from a group of subjects with explained variation >=85%
MTA(Y1=group1)
############# Group comparison
MTA_comparison=function(Controls, Cases,k,Laplacian.matrix,timevec,lambda1.set,
lambda2.set,lambda3.set,num.sam,alpha)
{
N1=dim(Controls)[1];N2=dim(Cases)[1];
N=min(N1,N2)
T=dim(Controls)[3]
if(is.null(timevec)) timevec=timevec=1:T
BS = create.bspline.basis(timevec, norder=4)
B = getbasismatrix(timevec, BS)  #basis function
Omega = getbasispenalty(BS)
cc.list=ff.list=list()
res=cc.reference=NULL
for(rr in 1:num.sam)
{
aa1=sample(1:N2,floor(N/5*4));aa2=sample(1:N1,floor(N/5*4))
#aa1=sample(1:N2,N);aa2=sample(1:N1,N)
Z=Cases[aa1,,]-Controls[aa2,,]
Z1=Z
ff=cc=pro=NULL
for(i in 1:100)
{
AA1=MTA01(Z1,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set,lambda3.set)
cc=rbind(cc,AA1[[1]]);ff=cbind(ff,AA1[[2]])
Z.pred=ff%*%cc%*%(t(B))
pro=c(pro,dim(Z)[1]*sum(Z.pred^2)/sum(Z^2))
tem=diff(pro)
if(length(tem)!=0) if(tem[length(tem)]<=0) break;
for(nn in 1:dim(Z1)[1]) Z1[nn,,]=Z1[nn,,]-Z.pred
}
cc=cc[1:length(tem),]; ff=ff[,1:length(tem)]
if(is.null(dim(cc))) {cc=t(cc);ff=as.matrix(ff)}
cc.list[[rr]]=cc;ff.list[[rr]]=ff
aa1=sample(1:N1,floor(N1/2))
aa2=setdiff(1:N1,aa1); aa3=min(length(aa1),length(aa2))
Z=Controls[aa1[1:aa3],,]-Controls[aa2[1:aa3],,]
AA2=MTA01(Z,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set=seq(0,0.1,0.005),lambda3.set)
##lambda2.set=seq(0,0.2,0.001)
cc.reference=rbind(cc.reference,AA2[[1]])
}
num.tpc=max(sapply(1:num.sam, function(x,cc.list) dim(cc.list[[x]])[1], cc.list=cc.list))
sin.re=matrix(NA,nrow=num.sam,ncol=(num.tpc+1))
for(i in 1:num.sam) { tem.va=rowSums((cc.list[[i]]%*%(t(B)))^2);
sin.re[i,1:length(tem.va)]=tem.va;
sin.re[i,(num.tpc+1)]=sum((cc.reference[i,]%*%(t(B)))^2)}
pvalue.tpc=NULL
for(j in 1:num.tpc)  if(length(na.omit(sin.re[,j]))>2) pvalue.tpc=c(pvalue.tpc,wilcox.test(sin.re[,j],sin.re[,(num.tpc+1)],alternative = c("greater"))$p.value)
########## Multiple comparison correct: Bonferroni correction
#index.sig=which(pvalue.tpc<=alpha/length(pvalue.tpc))
### gatekeeping procedure
pvalue.tpc=c(0,pvalue.tpc)
for(j in 2:length(pvalue.tpc)) pvalue.tpc[j]=max(pvalue.tpc[j-1],pvalue.tpc[j])
pvalue.tpc=pvalue.tpc[-1]
index.sig=which(pvalue.tpc<=alpha)
if (length(index.sig)!=0) {
Alltrend=NULL
for(j in index.sig) {
common.trend=sapply(1:num.sam, function(x,cc.list) cc.list[[x]][j,]%*%(t(B)),cc.list=cc.list)
sign.ind=which(sign(common.trend[1,])==-1)
common.trend[,sign.ind]=common.trend[,sign.ind]*(-1)
for(xx in sign.ind) ff.list[[xx]][,j]=ff.list[[xx]][,j]*(-1)
common.trend=data.frame(common.trend,time=1:nrow(common.trend),trend=rep(j,nrow(common.trend)))
Alltrend=rbind(Alltrend,common.trend) }
plot.data=melt(Alltrend,id=c("time","trend"))
plot.data$trend=sapply(plot.data$trend, toOrdinal)
plot.data$trend=paste(plot.data$trend, "common trend")
qq=ggplot(plot.data, aes(x=time, y=value, group = variable))+
geom_line() +geom_point()+theme_bw()+scale_x_continuous(breaks=unique(plot.data$time))+
facet_wrap(~trend,scales="free_y")
########### Discovery rate
AllDiscover=Effect=SE=NULL
for(j in index.sig) {
select.taxa=sapply(1:num.sam, function(x,ff.list) ff.list[[x]][,j],ff.list=ff.list)
AllDiscover=rbind(AllDiscover, c(j,rowMeans(select.taxa!=0)))
Effect=rbind(Effect,c(j,rowMeans(select.taxa)))
SD=apply(select.taxa,1,sd); #print(SD)
SE=rbind(SE,c(j,SD/sqrt(num.sam)))
}
Allresults=list(pvalue.tpc,qq,AllDiscover,Effect,SE)
names(Allresults)=c("P value","Trend plot","Discover rate", "Factor score", "Standard error")
} else {Allresults=list(pvalue.tpc);
names(Allresults)=c("P value","Trend plot")}
return(Allresults) }
MTA_comparison(group1, group2,k,Laplacian.matrix=NULL,timevec=NULL,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
MTA_comparison(group1, group2,K=5,Laplacian.matrix=NULL,timevec=NULL,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
MTA_comparison(group1, group2,k=2,Laplacian.matrix=NULL,timevec=NULL,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
library(dirmult)
## sample size
N=20;
## time point
T=10;
##number of taxa
P=30;
beta0=abs(rnorm(P,10,20))
## key taxa
causal.ind=sample(1:20,3)
#### generating two groups
group1=array(NA, dim = c(N,P,T))
for(t in 1:T)  group1[, ,t] = rdirichlet(N,(beta0))
group2=array(NA, dim = c(N,P,T))
for(t in 1:T){
betaT=rep(0,P)
effect.size1=c(-1,2, -1)/2*min(beta0[causal.ind])*sin(t)
betaT[causal.ind]=effect.size1
group2[, ,t] = rdirichlet(N,(beta0+betaT))
}
setwd("C:/Users/WANGC22/Downloads/MTA package/R program")
library(gtools)
library(fda)
library(toOrdinal)
library(ggplot2)
library(reshape2)
library(matlib)
library(adephylo)
MTA_comparison(group1, group2,k=2,Laplacian.matrix=NULL,timevec=NULL,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
############Extracted the dynamic trends from a group of subjects
MTA01=function(All.x,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set,lambda3.set)
{
N=dim(All.x)[1]; P=dim(All.x)[2];T=dim(All.x)[3];
if(is.null(timevec)) timevec=timevec=1:T
BS = create.bspline.basis(timevec, norder=4)
B = getbasismatrix(timevec, BS)  #basis function
Omega = getbasispenalty(BS)
if(N==1) {
Ex.pro=NULL
for(lambda1 in lambda1.set) for(lambda3 in lambda3.set) for(lambda2 in lambda2.set) {
res1=MTA00(All.x,Laplacian.matrix,timevec,lambda1,lambda2,lambda3)
c.updated=res1[[1]];f.updated=res1[[2]];
Ex.pro=rbind(Ex.pro,c(lambda1,lambda2,lambda3,
sum((as.matrix(f.updated)%*%c.updated%*%(t(B)))^2)/sum(All.x^2)))
}
tem.in=which.max(Ex.pro[,4])
lambda1.fin=Ex.pro[tem.in,1];lambda2.fin=Ex.pro[tem.in,2];lambda3.fin=Ex.pro[tem.in,3];
res1=MTA00(All.x,Laplacian.matrix,timevec,lambda1.fin,lambda2.fin,lambda3.fin)
} else {res1=MTA.cv(All.x,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set,lambda3.set)}
c.updated=res1[[1]];f.updated=res1[[2]];
return(list(c.updated,f.updated))
}
########### Spline coefficients
### (a) in step 2
trend.coef.func = function(f,x,B, Om, lambda1){
N=dim(x)[1]
## Ginv instead of solve
theta = Ginv(N*t(B)%*%B+lambda1*Om)%*%(t(B))%*%(t(apply(x, c(2,3), sum)))%*%f
return(as.vector(theta))
}
##### (b) in step 2
####### score
soft <- function(vec,lam){
return(sign(vec)*pmax(0,abs(vec)-lam))
}
score.func=function(c,x,B, Laplacian.matrix, lambda2,lambda3) {
N=dim(x)[1]; P=dim(x)[2]
tem.eq1=t(c)%*%(t(B))%*%(t(apply(x, c(2,3), sum)))
if(is.null(Laplacian.matrix)) tem.eq2=Ginv(diag(c(N*t(c)%*%(t(B))%*%B%*%c),P)) else tem.eq2=
Ginv(diag(c(N*t(c)%*%(t(B))%*%B%*%c),P)+lambda3*Laplacian.matrix)
# tem.eq2=solve(N*kronecker(t(c)%*%(t(B))%*%B%*%c, diag(1,P))+lambda3*Laplacian.matrix)
# lambda2=BinarySearch(tem.eq1,sumabs)
if(lambda2==0) tem.eq1=tem.eq1 else tem.eq1=soft(tem.eq1,lambda2/2)
ff=tem.eq1 %*% tem.eq2
return(as.vector(ff))
}
################
MTA00=function(x,Laplacian.matrix,timevec,lambda1,lambda2,lambda3,num.iter=100)
{
N=dim(x)[1]; P=dim(x)[2]; T=dim(x)[3]
if(is.null(timevec)) timevec=1:T
BS = create.bspline.basis(timevec, norder=4)
B = getbasismatrix(timevec, BS)
Omega = getbasispenalty(BS)
qq=apply(x,c(2,3),mean)
qq=svd(cor(t(qq)))
f.updated=qq$u[,1]
ff=f.updated; cc=rep(0,T+2)
for(i in 1:num.iter)
{
# print(i);
c.updated=trend.coef.func(f.updated,x,B, Omega, lambda1)
f.updated=score.func(c.updated,x,B, Laplacian.matrix,lambda2,lambda3)
if(sum(abs(f.updated))!=0) {
f.updated=f.updated/sqrt(sum(f.updated^2))
c.updated=round(c.updated,4)
f.updated=round(f.updated,4)
cc=rbind(cc,c.updated)
ff=rbind(ff,f.updated)
#print(c.updated);print(f.updated)
threshold=abs(c(ff[i+1,]-ff[i,],cc[i+1,]-cc[i,],(ff[i+1,ff[i,]!=0]-ff[i,ff[i,]!=0])/ff[i,ff[i,]!=0],
(cc[i+1,cc[i,]!=0]-cc[i,cc[i,]!=0])/cc[i,cc[i,]!=0]))
if(max(threshold)<10^(-4)) break;
} else break;}
return(list(c.updated,f.updated))
}
### Cross Validation
MTA.cv=function(All.x,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set,lambda3.set)
{
if(is.null(timevec)) timevec=1:dim(All.x)[3]
######## cubic spline basis
BS = create.bspline.basis(timevec, norder=4)
B = getbasismatrix(timevec, BS)
Omega = getbasispenalty(BS)
cv.group=sample(rep(seq_len(k), length.out = dim(All.x)[1]))
allmse=NULL
for(lambda1 in lambda1.set) for(lambda3 in lambda3.set) for(lambda2 in lambda2.set) {
mse=0
for(rr in 1:k)
{
tem.x=All.x[cv.group!=k,,]
#       if(length(dim(tem.x))<3) {tem.x=array(NA, dim = c(1,dim(tem.x)[1],dim(tem.x)[2]))
#        tem.x[1,,]=All.x[-rr,,]}
tem.res=MTA00(x=tem.x,Laplacian.matrix=Laplacian.matrix,timevec=timevec,
lambda1=lambda1,lambda2=lambda2,lambda3=lambda3)
c.updated=tem.res[[1]]; f.updated=tem.res[[2]]
if(sum(abs(f.updated))!=0) {
res=sapply(which(cv.group==k), function(x,aa,bb) {return(sum((aa[k,,]-bb)^2))},
aa=All.x,bb=as.matrix(f.updated)%*%c.updated%*%(t(B)))
mse=mse+mean(res)}  else {mse=0; break;}
}
allmse=rbind(allmse,c(lambda1,lambda2,lambda3,mse))
}
large.in=which(allmse[,4]>0)
tem.in=which.min(allmse[large.in,4]); tem.in=large.in[tem.in]
lambda1.fin=allmse[tem.in,1]; lambda2.fin=allmse[tem.in,2];lambda3.fin=allmse[tem.in,3];
#print(allmse[tem.in,])
tem.res=MTA00(x=All.x,Laplacian.matrix=Laplacian.matrix,timevec=timevec,
lambda1=lambda1.fin,lambda2=lambda2.fin,lambda3=lambda3.fin)
c.updated=tem.res[[1]];f.updated=tem.res[[2]]
return(list(c.updated,f.updated))
}
############Extracted the dynamic trends from a group of subjects
MTA_pattern=function(x,M,proportion.explained, k,Laplacian.matrix,timevec,lambda1.set,
lambda2.set,lambda3.set)
{
N=dim(x)[1]; P=dim(x)[2];T=dim(x)[3];
if(is.null(timevec)) timevec=timevec=1:T
BS = create.bspline.basis(timevec, norder=4)
B = getbasismatrix(timevec, BS)  #basis function
Omega = getbasispenalty(BS)
if(is.null(M)) {
ff=cc=NULL
explained.variance=NULL
xx=x
for(i in 1:50)
{
predict.res=MTA01(xx,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set,lambda3.set)
c.updated=predict.res[[1]];f.updated=predict.res[[2]];
cc=rbind(cc,c.updated);ff=cbind(ff,f.updated)
predict.matrix=ff%*%cc%*%(t(B))
explained.variance=sum(predict.matrix^2)*N/(sum(x^2))
for(j in 1:N) xx[j,,]=xx[j,,]-predict.matrix
if (explained.variance>proportion.explained) break;}} else {
ff=cc=NULL
xx=x
for(i in 1:M)
{
predict.res=MTA01(xx,k,Laplacian.matrix,timevec,lambda1.set,lambda2.set,lambda3.set)
c.updated=predict.res[[1]];f.updated=predict.res[[2]];
cc=rbind(cc,c.updated);ff=cbind(ff,f.updated)
predict.matrix=ff%*%cc%*%(t(B))
for(j in 1:N) xx[j,,]=xx[j,,]-predict.matrix
}}
plot.data=data.frame(cbind(timevec,sapply(1:nrow(cc),function(x,cc,B){return(cc[x,]%*%t(B))},cc=cc,B=B)))
colnames(plot.data)=c("time",paste(sapply(1:nrow(cc), toOrdinal), "common trend"))
plot.data=melt(plot.data,id.vars = 1)
pc.plot=ggplot(plot.data, aes(time, value))+geom_point()+
# geom_smooth(se=FALSE)+
geom_line()+theme_bw()+ylab("Microbial common trend")+
facet_wrap(~variable,scales="free")
AA=list(pc.plot,ff,cc)
return(AA)
}
MTA_comparison(group1, group2,k=2,Laplacian.matrix=NULL,timevec=NULL,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
MTA_comparison(group1, group2,k=5,Laplacian.matrix=NULL,timevec=NULL,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
######## comparing between group1 and group2
aa=MTA(list(group1,group2))
### The final function
MTA=function(Y1,Y_new=NULL,phy.tree=NULL,timevec=NULL, transf="None",
M=NULL,proportion.explained=0.85,
k=5,lambda1.set=c(0.01,0.1,1,10),
lambda2.set=seq(0,2,0.1),lambda3.set=c(0),num.sam=10,alpha=0.05)
{
############### phylogentic tree to laplacian penalty
if (is.null(phy.tree)) Laplacian.matrix=NULL else {
distance.tree=distTips(phy.tree, tips = "all", method ="patristic")
distance.tree=(distance.tree-min(distance.tree))/(max(distance.tree)-min(distance.tree))
adjacency.tree=as.matrix(distance.tree)
adjacency.tree=1-adjacency.tree
diag(adjacency.tree)=1
diag.L=rowSums(adjacency.tree)
Laplacian.matrix=diag(diag.L)-adjacency.tree
}
########## data transformation before the analysis
if(transf=="Log") {
if(!(is.list(Y1))) {
small.value=min(c(Y1)[c(Y1)!=0])/2
for (ii in 1:dim(Y1)[1]) for(tt in 1:dim(Y1)[3]) {x=Y1[ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y1[ii,,tt]=log(x) }} else {
small.value=min(unlist(Y1)[unlist(Y1)!=0])/2
for(j in 1:lenght(Y1)) for (ii in 1:dim(Y1[[j]])[1]) for(tt in 1:dim(Y1[[j]])[3]) {x=Y1[[j]][ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y1[[j]][ii,,tt]=log(x) }}
if(!(is.null(Y_new))) {
small.value=min(c(Y_new)[c(Y_new)!=0])/2
for (ii in 1:dim(Y_new)[1]) for(tt in 1:dim(Y_new)[3]) {x=Y_new[ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y_new[ii,,tt]=log(x) }}
}
if(transf=="ALR") {
if(!(is.list(Y1))) {
Y22=Y1[,-dim(Y1)[2],]
small.value=min(c(Y1)[c(Y1)!=0])/2
for (ii in 1:dim(Y1)[1]) for(tt in 1:dim(Y1)[3]) {x=Y1[ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y22[ii,,tt]=log(x[-length(x)]/x[length(x)]) }
Y1=Y22
} else { YY2=list()
small.value=min(unlist(Y1)[unlist(Y1)!=0])/2
for(j in 1:lenght(Y1)) {
Y22=Y1[[j]][,-dim(Y1[[j]])[2],]
for (ii in 1:dim(Y1[[j]])[1]) for(tt in 1:dim(Y1[[j]])[3]) {x=Y1[[j]][ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y22[ii,,tt]=log(x[-length(x)]/x[length(x)]) }
YY2[[j]]=Y22
}}
if(!(is.null(Y_new))) {
Y22=Y_new[,-dim(Y_new)[2],]
small.value=min(c(Y_new)[c(Y_new)!=0])/2
for (ii in 1:dim(Y_new)[1]) for(tt in 1:dim(Y_new)[3]) {x=Y_new[ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y22[ii,,tt]=log(x[-length(x)]/x[length(x)]) }
Y_new=Y22
}
}
if(transf=="CLR") {
if(!(is.list(Y1))) {
small.value=min(c(Y1)[c(Y1)!=0])/2
for (ii in 1:dim(Y1)[1]) for(tt in 1:dim(Y1)[3]) {x=Y1[ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y1[ii,,tt]=log(x/(cumprod(x)[length(x)])^(1/length(x))) }} else {
small.value=min(unlist(Y1)[unlist(Y1)!=0])/2
for(j in 1:lenght(Y1)) for (ii in 1:dim(Y1[[j]])[1]) for(tt in 1:dim(Y1[[j]])[3]) {x=Y1[[j]][ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y1[[j]][ii,,tt]=log(x/(cumprod(x)[length(x)])^(1/length(x))) }}
if(!(is.null(Y_new))) {
small.value=min(c(Y_new)[c(Y_new)!=0])/2
for (ii in 1:dim(Y_new)[1]) for(tt in 1:dim(Y_new)[3]) {x=Y_new[ii,,tt];
if(min(x)==0) x=(x+small.value)/(sum((x+small.value)))
Y_new[ii,,tt]=log(x/(cumprod(x)[length(x)])^(1/length(x))) }}
}
######## analysis involving three parts
if(!(is.list(Y1))) {trend.result=MTA_pattern(Y1,M=M,proportion.explained=proportion.explained, k=k,
Laplacian.matrix=Laplacian.matrix,timevec=timevec,
lambda1.set=lambda1.set,lambda2.set=lambda2.set,lambda3.set=lambda3.set)
ff=trend.result[[2]]; colnames(ff)=paste("contributing to", 1:ncol(ff), "common trend")
result.sum=list(trend.result[[1]],ff)
names(result.sum)=c("Trend Plot","Factor Score")
}
if(is.list(Y1) & is.null(Y_new)) {
pairwise=combn(length(Y1),2)
if(is.null(names(Y1))) label.training=1:length(Y1) else label.training=names(Y1)
comparsion.res=list()
for(i in 1:ncol(pairwise)) {
tem=pairwise[,i]
result.sum=MTA_comparison(Controls=Y1[[tem[1]]], Cases=Y1[[tem[2]]],k=k,Laplacian.matrix=Laplacian.matrix,timevec=timevec,lambda1.set=lambda1.set,
lambda2.set=lambda2.set,lambda3.set=lambda3.set,num.sam=num.sam,alpha=alpha)
comparsion.res[[i]]=result.sum
}
names(comparsion.res)=apply(pairwise,2,function(x){return(paste("Comparison between group", x[1], "and group", x[2]))})
result.sum=comparsion.res
}
if(is.list(Y1) & !(is.null(Y_new))) {
if(is.null(names(Y1))) label.training=1:length(Y1) else label.training=names(Y1)
result.sum=MTA_classification(group_new=Y_new, training.set=Y1, label.training=label.training, proportion.explained=proportion.explained, k=k,
Laplacian.matrix=Laplacian.matrix,timevec=timevec,lambda1.set=lambda1.set,
lambda2.set=lambda2.set,lambda3.set=lambda3.set)
}
result.sum
}
######## comparing between group1 and group2
aa=MTA(list(group1,group2))
aa
library(devtools)
library(roxygen2)
system("R CMD check C:/Users/WANGC22/Downloads/MTA package/MTA")
